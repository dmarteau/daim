/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#ifndef __gen_cciIXPCOMSupports_h__
#include "cciIXPCOMSupports.idl"
#endif

/*
 * Map daim type to xpcom/nspr type
 */

typedef PRBool             dm_bool   ;
typedef PRUint8            dm_uint8  ;
typedef PRUint8            dm_byte   ;
typedef PRUint16           dm_uint16 ;
typedef PRUint16           dm_unichar;
typedef PRUint32           dm_uint32 ;
typedef PRUint64           dm_uint64 ;
typedef PRInt16            dm_int16  ;
typedef PRInt32            dm_int32  ;
typedef PRInt64            dm_int64  ;

typedef unsigned long      cci_refcnt ;
typedef unsigned long      cci_result ;

//typedef unsigned long       size_t;

typedef float               dm_float  ;
typedef double              dm_real   ;
typedef double              dm_double ;

[ptr] native bytePtr(PRUint8);

// Native array of char pointer
native charPtrArray(char * *);
native unicharPtrArray(dm_unichar * *);
[ref] native charPtrArrayRef(char * *);
[ref] native unicharPtrArrayRef(dm_unichar * *);

%{C++

typedef void*              dm_ptr ;

// Forward declarations
class dmImage;
class dmImageBuffer;
class dmRegion;
class dmBufferParameters;
class dmKernelFamily;
class dmMaskDescription;
class dmHistogram;

#include "dmCoordinatesTypes.h"
#include "dmPixelFormats.h"
#include "dmImageData.h"
#include "dmOperators.h"
#include "dmRGBColor.h"

// Redefine some CCI macros
#define CCI_CALLBACK NS_CALLBACK

/*
 * Start commenting out the C++ versions of the below in the output header
 */
#if 0
%}

typedef unsigned long EPixelFormat;

[ptr]   native dmKernelFamilyPtr(dmKernelFamily);
[ref]   native dmKernelFamilyRef(dmKernelFamily);
[ptr]   native dmImagePtr(dmImage);
[ptr]   native dmRegionPtr(dmRegion);
[ref]   native dmRegionRef(dmRegion);
[ptr]   native dmImageBufferPtr(dmImageBuffer);
[ptr]   native dmHistogramPtr(dmHistogram);
[ref]   native dmImageDataRef(dmImageData);

[ptr]   native dmRectPtr(dm_rect);
[ref]   native dmRectRef(dm_rect);

[ptr]   native dmMaskDescriptionPtr(dmMaskDescription);
[ref]   native dmMaskDescriptionRef(dmMaskDescription);



%{C++
/*
 * End commenting out the C++ versions of the above in the output header
 */
#endif
%}


interface cciIImageContainer;
interface cciIRegionContainer;
interface cciIKernelFamilyContainer;

typedef nsISupports cciXPCOMSupports;

typedef cciIImageContainer           cciImage;
typedef cciIRegionContainer          cciRegion;
typedef cciIKernelFamilyContainer    cciKernelFamily;


