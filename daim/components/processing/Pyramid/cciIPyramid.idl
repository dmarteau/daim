/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com);
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"

interface cciIImageList;
interface cciIImageFilter;
interface cciIFilterContext;
interface cciIImageContainer;
interface cciIRegionContainer;
interface cciIKernelFamilyContainer;

/**
 * @ingroup daim_interfaces
 *
 * @brief Build an image pyramid by downsampling with a convolution kernel
 */
[scriptable, uuid(b1f1b06b-96ac-44c3-bb1d-4fdeb386764d)]
interface cciIPyramid : cciIXPCOMSupports
{
  /**
   * @brief Construct the pyramid from source image in buffer 0.
   *
   * Pyramid images will be stored into the buffer list of the \a params
   * object starting from index 1.
   */
  void generate( in cciImage image, in cciRegion roi,
                 in cciIImageList imagelist, in unsigned long sizelimit,
                 in cciIFilterContext filterCtxt );

  /**
   *  @brief Reconstruct an image from buffer index \a from
   *  to buffer index \a to.
   *
   * The reconstruction will be applied \a from-\a to times
   * on the source image.
   * If \a to \>= \a from : the source image is copied into
   * the output buffer at index \a to.
   *
   * @param srcImages the list for the source images
   * @param dstImages the imagelist in which result is stored.
   * @param from      the buffer index of the imagelist handled
                      by the \a params object.
   * @param to        the buffer index of the result image.
   */
  void reconstruct( in cciIImageList srcImages,
                    in cciIImageList dstImages,
                    in unsigned long from, in unsigned long to,
                    in cciIFilterContext filterCtxt );

  /**
   * @brief Construct a down sampling of the image
   *
   * the resulting image will be stored int the
   * image buffer \a index  of the \a imagelist.
   */
  void downSample( in cciImage image, in cciRegion roi,
                   in cciIImageList imagelist, in unsigned long index,
                   in cciIFilterContext filterCtxt );

  /**
   * @brief Set the convolution kernel to be used for the construction
   *         of the pyramid, if no  kernel is provided the
   *         downsampling is done without filtering
   */
  attribute cciKernelFamily kernel;

   /**
    * @brief Set the downsample factor (default to 2)
    */
  attribute dm_uint32 factor;

};



%{C++

#define CCI_PYRAMID_CID \
{ /* 30F6A155-2F7D-4B74-9B09-5C9D236739B1 */       \
  0x30F6A155,                                      \
  0x2F7D,                                          \
  0x4B74,                                          \
  {0x9B, 0x09, 0x5C, 0x9D, 0x23, 0x67, 0x39, 0xB1} \
}

#define CCI_PYRAMID_CONTRACTID "@daim.org/processing/pyramid;1"
#define CCI_PYRAMID_CLASSNAME  "Pyramid image decomposition"

%}
