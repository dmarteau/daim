/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"

interface cciISurface;
interface cciIRemoteSurface;
interface cciIInterfaceRequestor;
interface cciIMetaDataContainer;
interface cciIColorTable;

[scriptable, uuid(2b86bcda-f881-467c-80b4-7362adf62feb)]
interface cciISurfaceDriver : cciIXPCOMSupports
{
  attribute cciIInterfaceRequestor callbacks;

  /* 
   * Methods are noscripts because they require native char set for
   * the location
   */

  [noscript] cciISurface createSurfaceFromData( in string location,
                                                in dmImageDataRef imData,
                                                in bytePtr alphaBits, in long alphaStride,
                                                in string options);

  [noscript] cciISurface createSurface( in string location,
                                        in dm_uint32 width,
                                        in dm_uint32 height,
                                        in EPixelFormat format,
                                        in dm_bool hasAlpha,
                                        in string options);

  boolean isCompatibleDriver( in string type );

  readonly attribute boolean hasCreateCapabilities;

  [noscript] void saveImageBits( in string newLocation, in dmImageDataRef imData, in string options );

  [noscript] void saveImageBitsWithAlpha( in string newLocation, 
                                          in dmImageDataRef imData, 
                                          in bytePtr alphaBits, in long alphaStride,
                                          in cciIMetaDataContainer exif, 
                                          in cciIColorTable colorTable,
                                          in string options );
  
  
  void unlink( in string location );
  void rename( in string newLocation, in string oldLocation );
  void copyFiles( in string newLocation, in string oldLocation );
};


