/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"

interface cciISurface;
interface cciIImage;
interface cciIImageFilter;
interface cciIFilterContext;
interface cciIImageContainer;
interface cciIRegionContainer;
interface cciIColorTable;

/**
 * @ingroup daim_interfaces
 *
 * @brief Image shell utility interface
 *
 * The image shell provide facility methods for loading/saving images
 * and applying filters
 */
[scriptable, uuid(FE8496B8-D7F8-4C19-983C-FE9B0CB21183)]
interface cciIImageShell : cciIXPCOMSupports
{
  /**
   * The underlying image
   */
  attribute cciIImage image;
  
  /**
   * @brief Create a new (empty) image
   */
  void create( in unsigned long width, in unsigned long height, in EPixelFormat format );

  /**
   * Release all resources held by the image shell
   */
  void destroy();
  
  /**
   * Load an image from \a path
   * @param path the path of the image on the disk  (in native charset)
   * @param alpha if true, the alpha channel is also retrieved.
   */
  [noscript] void loadImage( in string path );

  /**
   * Load an image from \a path
   * @param path the path of the image on the disk  (in native charset)
   * @param type the mime type of the image on disk or the name of the driver to use.
   */
  [noscript] void saveImage( in string path, in string type, in string options );
 
  /**
   * Copy a region \a roi of the given \a srcImage a location \a dstX \a dstY of
   * the current image.
   *
   * @param srcImage the image source
   * @param roi      the region of the image to be copied (can be null)
   * @param format   the format of the new image (can be dmPixelFormatUndefined)
   * @param mode     the arithmetic/logical operation to be performed between source and destination
   */
  void copy( in cciImage srcImage, in cciRegion roi, in dm_int32 dstX, in dm_int32 dstY,
             in dm_uint32 mode);

  /**
   * Apply generic Filter operation to current image
   */
  void applyFilter( in cciIImageFilter filter, in cciRegion rgn );

  /*
   * Filter context
   */

  /**
   * The current filter context
   */
  readonly attribute cciIFilterContext filterContext;

  /**
   * Copy range and image data to the given filtercontext
   */
  void saveFilterContext( in cciIFilterContext filterCtxt, in cciRegion rgn );

  /**
   * Restore range and image data from the given filtercontext
   */
  void restoreFilterContext( in cciIFilterContext filterCtxt );

};


