/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"


interface cciIImageList;
interface cciIImageContainer;
interface cciIRegionContainer;
interface cciIKernelFamilyContainer;

/**
 * @ingroup daim_interfaces
 *
 * @brief Merge and split RGB images into multiple channels images
 *
 * Components image are stored into this object in buffer 0..n-1, where n
 * is the number of components from the selected type of decomposition.
 *
 * The format of the channels are either 8 bits and floating point pixel format
 * ( see SetChannelFmt() for setting the format of the decomposition).
 * In floating point format the results are unormalized and the range of values
 * varies on the type of decomposition used.
 *
 */
[scriptable, uuid(62cee349-caa9-4b38-8ba6-570ec6a440e4)]
interface cciIColorSpace : cciIXPCOMSupports
{
  [noscript,notxpcom] dmImagePtr getChannel( in dm_uint32 channel );

  /**
   * @brief The image list used to store splitted channels
   */
  attribute cciIImageList imageList;

  /**
   * @brief Split image into components
   */
  void split( in cciImage image, in cciRegion roi );

  /**
   *  @brief Merge image from imagelist components.
   */
  void merge( in cciImage image  );

  /**
   * @brief Get the pixel format of the channels
   * @note format are scalar and usually only 8 bits and floating point pixel images are
   * supported
   */
  attribute EPixelFormat channelFmt;

  /**
   *  @brief Return true if the merge operation can be performed in
   *         the current colorspace
   */
  readonly attribute boolean canMerge;

  /**
   * @brief Return the number of channels used in the decomposition
   */
  readonly attribute dm_uint32 numChannels;

  /**
   * @brief Extract channel component from current parameter image
   *
   *  The extracted image will be stored at buffer \a index of the
   *  parameter image list.
   */
  void extract(in cciImage image, in cciRegion roi, in dm_uint32 channel, in dm_uint32 index);

  /**
   * @brief Extract channel component from current parameter image
   *
   *  The extracted image will be stored
   *  in the passed imagebuffer.
   */
  [noscript] void extractInBuffer(in dmImagePtr image, in dmRegionPtr roi, in dm_uint32 channel,
                                  in dmImageBufferPtr buffer);

  /**
   *  @brief Set the rectangular ROI used for merge operation
   */
  [noscript] void setRect( in dmRectPtr rect );

  /**
   * @brief Split color specified by q1,q2,q2,q4
   *
   *  On input  q1, q2, and q3 are the RGB components
   *  On output q1, q2, and q3 are the transformed components
   */
  void splitColor( inout dm_real q1, inout dm_real q2, inout dm_real q3, inout dm_real q4 );

  /**
   * @brief Merge color specified by q1,q2,q2,q4
   *
   *  On input   q1, q2, and q3 are the transformed components
   *  On output  q1, q2, and q3 are the RGB components
   */
  void mergeColor( inout dm_real q1, inout dm_real q2, inout dm_real q3, inout dm_real q4 );

};



%{C++

#define CCI_COLORSPACE_CONTRACTID_ "@daim.org/processing/colorspace;1?name="
#define CCI_COLORSPACE_CONTRACTID(name) CCI_COLORSPACE_CONTRACTID_#name

%}

