/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "cciIImageContainer.idl"

interface cciISurface;
interface cciIColorTable;
interface cciIImageList;

/**
 *  @ingroup daim_interfaces
 *
 *  @brief interface to image (scriptable)
 */
[scriptable, uuid(8e359cd4-3d17-4ba3-92f5-b8b654be0c5b)]
interface cciIImage : cciIImageContainer
{
  [noscript] void lock(  in dmImageDataRef imData, in dmRectPtr rect );
  [noscript] void unlock();

  /*
   * Image structure
   */
  
  /**
   * @return the width of the image
   */
  readonly attribute unsigned long width;

  /**
   * @return the height of the image
   */
  readonly attribute unsigned long height;

  /**
   * @return the pixel format of the image
   */
  readonly attribute EPixelFormat pixelFormat;

  /*
   * Initialisation
   */

  /**
   * Enable/disable alpha channel for rgb images
   */
  attribute boolean enableAlpha;

  /*
   * Image I/O
   */

  /**
   * @brief Load image data directly from a external surface
   *
   * @param rgn      
   *     the rgn that define the rectangular coordinates of the region that is to be retrieved.
   *     For non rectangular region, the bounding box is used.
   *
   * Very large image can be handled that way (if the underlying surface driver has block read capabilities).
   */
  void loadSurfaceBits( in cciISurface surface, in cciRegion rgn );

  /**
   * @brief Save an image directly to an external surface
   *
   * @param rgn     
   *     the rgn that define the coordinates of the region that is to be written to.
   *     For non rectangular region, the bounding box is used)
   *
   * Very large image can be handled that way (if the underlying surface driver has block read capabilities).
   */
  void writeSurfaceBits( in cciISurface surface, in cciRegion rgn );

  /**
   * Access to the current color table
   */
  attribute cciIColorTable colorTable;

  /*
   * Transformations 
   */
  
  /** 
   * Apply the current color table to the image 
   */
  void applyColorTable( [optional] in cciRegion rgn );

  /*
   * Fill a region with a foreground/background value
   * 
   * @param foregroundValue 
   *    if true (resp. false) fill the image with the foreground (resp. background) value defined for the 
   *    pixel type of the image 
   * @param rgn
   *    an optional region that defines the part of the image to be filled 
   */
  void fill( in boolean foregroundValue, [optional] in cciRegion rgn );
  
  /*
   * Copy
   */
  
  /**
   * Copy a region \a roi of the given \a srcImage a location \a dstX \a dstY of
   * the current image.
   *
   * @param srcImage the image source
   * @param roi      the region of the image to be copied (can be null)
   * @param format   the format of the new image (can be dmPixelFormatUndefined)
   */
  void getCopy( in cciImage srcImage, in cciRegion roi, in dm_int32 dstX, in dm_int32 dstY );

  /**
   * Create a copy of the image data 
   * 
   * @param format 
   *    the pixel format of copy, if set to dmPixelFormatUndefined, no format conversion is applied.
   * @param rgn
   *    an optional region that defines the rectangular part of the image to be copied 
   *    (for non rectangular region, the bounding box if the region is used).
   */
  cciIImage createCopy( in EPixelFormat format, [optional] in cciRegion rgn );
};


