/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"

/**
 * @brief Interface to image provider
 */

interface cciIColorTable;

[scriptable, uuid(c520fae3-63c8-4c5d-bc75-2dfc754395e6)]
interface cciISurface : cciIXPCOMSupports
{
  [noscript,notxpcom] dm_uint32 Width();
  [noscript,notxpcom] dm_uint32 Height();
  [noscript,notxpcom] dm_uint32 Bands();

  [noscript,notxpcom] EPixelFormat PixelFormat();
  [noscript,notxpcom] dm_bool      HasAlpha();
  
  /**
   * Return true if the surface has sampling capabilities 
   * (i.e the surface can be resampled when accesing data)
   * 
   * Some block based reader can implement this
   */
  [noscript,notxpcom] dm_bool HasSamplingCapabilities();

  /**
   * Return true if the surface can convert data on the fly 
   * (i.e the surface can convert data to the format provided 
   * when accesing data)
   * 
   * Some block based reader can implement this
   */
  [noscript,notxpcom] dm_bool HasConvertCapabilities();
  
  [noscript,notxpcom] boolean IsLocked();
  [noscript,notxpcom] boolean IsWritable();

  [noscript] void lockBitsRect( in dmRectRef rect,in EPixelFormat format, in dmImageDataRef imData, in unsigned long lockModes );
  [noscript] void lockBits( in EPixelFormat format, in dmImageDataRef imData, in unsigned long lockModes );
  [noscript] void unlockBits( in dmImageDataRef imData );

  cciIColorTable getColorTable();
  void           setColorTable( in cciIColorTable colorTable );

  const unsigned long ELockWrite      = 0x01; /*! Write access */
  const unsigned long ELockRead       = 0x02; /*! Read access  */
  const unsigned long ELockUserBuffer = 0x04; /*! Buffer is provided by client */
  const unsigned long ELockAlpha      = 0x08; /*! Want alpha channel */

  const unsigned long ELockBandMask   = 0xff00;
  
  /**
   * Flush internally held data (data will be written to disk if necessary)
   */
  void flush();
  
};

[scriptable, uuid(295ed32c-e7d8-41c5-96b1-d7954abbb76c)]
interface cciIScriptableSurface : cciIXPCOMSupports
{
  readonly attribute dm_uint32 width;
  readonly attribute dm_uint32 height;
  readonly attribute dm_uint32 bands; // Number of bands (including alpha channel)

  readonly attribute  EPixelFormat pixelFormat;

  readonly attribute  dm_bool hasAlpha;

  readonly attribute  boolean isLocked;
  readonly attribute  boolean isWritable;
};
