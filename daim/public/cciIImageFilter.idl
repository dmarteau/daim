/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"

interface cciIFilterMask;
interface cciIFilterContext;
interface cciIImageContainer;
interface cciIRegionContainer;

/**
 * @ingroup daim_interfaces
 *
 * @brief Base interface for image filters
 */
[scriptable, uuid(31bedc86-76ce-453e-a4d7-41efce171e6d)]
interface cciIImageFilter : cciIXPCOMSupports
{
  /**
   * @brief Set/get the mask description for that filter
   *
   * The filter mask used for that filter
   * Not that cciIFilterMask objects can be created
   * on the fly, if you need to change the mask
   * (if allowed) first dereference the mask, apply changes,
   * and set the mask again.
   */
  [noscript] void getMask( in dmMaskDescriptionRef mask );
  [noscript] void setMask( in dmMaskDescriptionRef mask );

   // The following give some trouble to the gecko xpidl compiler
   //[noscript] attribute dmMaskDescriptionRef mask;

   /**
    * @brief Apply the filter to image
    *
    * @param image the image source
    * @param roi  the region mask for application of the filter
    * @param context the context used, the context must implement
    * an cciIInterfaceRequestor interface from where colorspace (@see ccIIColorSpace)
    * and image buffer (@see cciIImageBuffer) can be retrieved
    *
    * If no context is provided, it is the responsability of the filter
    * implementation to provide the required elements or return an error
    */
   void applyFilter( in cciImage image,
                     in cciRegion roi,
                     in cciIFilterContext filterCtxt );

};
