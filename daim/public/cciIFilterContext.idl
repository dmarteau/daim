/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "ccidaim.idl"

interface cciIImageContainer;
interface cciIRegionContainer;

/**
 * @ingroup daim_interfaces
 * @brief Image filter context
 *
 * The image filter context hold informations and sepcial buffers
 * passed to or returned from
 * most of the image manipulation interfaces
 */
[scriptable, uuid(b7ad05d1-2232-428c-982e-60f3fcd358f8)]
interface cciIFilterContext : cciIXPCOMSupports
{
  void createBuffer(  in cciImage image, in cciRegion rgn, in unsigned long padX, in unsigned long padY, in long limit_type );
  void restoreBuffer( in cciImage image );
  void clearBuffer();

  [noscript,notxpcom] dmImageBufferPtr nativeBuffer();

  const long ZERO_BOUNDARY     = 0;
  const long OBJECT_BOUNDARY   = 1;
  const long PERIODIC_BOUNDARY = 2;

  /**
   * @brief set/get the min stored range
   *
   * @see  setRange
   */
  readonly attribute dm_real minRange;

  /**
   * @brief set/get the max stored range
   *
   * @see  setRange
   */
  readonly attribute dm_real maxRange;

  /**
   * @brief set the range of pixels values
   *
   * This method set the admissible range of value of the density for
   * scalar 16 bits,32  bits or float images.
   *
   * The value can be computed automatically from the Scan method along
   * with the AUTORANGE flag.
   *
   * Computed range can be used as input range for density filters
   *
   * @see minRange
   * @see maxRange
   */
  void setRange( in dm_real rmin, in dm_real rmax );

};

