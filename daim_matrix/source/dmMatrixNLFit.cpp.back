
/* ::: BEGIN LICENSE BLOCK:::
 *
 * Copyright (c) 2004-2005 David Marteau
 *
 * This file is part of the DAIM Image Processing Library (DAIM library)
 *
 * The DAIM library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License (LGPL)
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * The DAIM library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the DAIM library; see the file LICENSE.  If
 * not, write to the Free Software Foundation, Inc., 59 Temple Place -
 * Suite 330, Boston, MA 02111-1307, USA.
 *
 *  ::: END LICENSE BLOCK::: */

#include "dmMatrixFunc.h"
#include "dmMatrixBase.h"
#include "dmMatrixArray.h"
#include "dmMatrixNLFit.h"

#include "dmMatrixUtils.h"

#define FZERO MATRIX_PREC(0.0)
#define FONE  MATRIX_PREC(1.0)


BEGIN_MATRIX()
//------------------------------------------------------------------------------
// Gauss Jordan elimination
// Defined in dmMatrixGaussJ.cpp
//------------------------------------------------------------------------------
void dmMatrix_GaussJ_1( dmMatrixArray& a,dmMatrixArray& b, int n,
                        int *indxc,int *indxr,int *ipiv );

//------------------------------------------------------------------------------
// Levenberg-Marquard algorithm
//------------------------------------------------------------------------------

#define SWAP(a,b) {tempr=(a);(a)=(b);(b)=tempr;}

// Build covariance matrix
static void _dmMatrix_CovSrt( const dmMatrixArray& covar, int ma, 
                              int* frozen, int mfit )
{
  int i,j,k;
  dm_matrix_t tempr;

  for (i=mfit+1;i<=ma;++i)
    for (j=1;j<=i;j++) covar[i][j]=covar[j][i]=0.0;

  k=mfit;

  for (j=ma;j>=1;--j) {
    if(frozen[j-1]) {
      for(i=1;i<=ma;++i) SWAP(covar[i][k],covar[i][j])
      for(i=1;i<=ma;++i) SWAP(covar[k][i],covar[j][i])
      --k;
    }
  }
}
//------------------------------------------------------------------------------

// Evaluate linearized fitting matrix

static dm_matrix_t _dmMatrix_MrqCof( 
                              dmMatrixRowCol& a, 
                              dmMatrixRowCol& dyda,
                              const dmMatrixRowCol& y, 
                              const dmMatrixRowCol& sig,
                              dmMatrixArray&  alpha,
                              dmVectorArray&  beta ,
                              dm_matrix_t (*funcs)(int,dmMatrixRowCol&,dmMatrixRowCol&,void*), 
                              void* userdata,
                              int*  ia )

{
  int i,j,k,l,m,mfit=0;
  dm_matrix_t ymod,wt,sig2i,dy,chisq;

  int ndata = y.Length();
  int ma    = a.Length();

  for(j=1;j<=ma;++j) {
    if(ia[j]) 
       ++mfit;
  }
    
  for (j=1;j<=mfit;j++) {
    for (k=1;k<=j;k++) alpha[j][k]=0.0;
    beta[j]=0.0;
  }
  
  chisq=0.0;
  for (i=1;i<=ndata;i++) 
  {
    ymod = (*funcs)(i,a,dyda,userdata);
    sig2i=FONE/(sig[i]*sig[i]);
    dy=y[i]-ymod;
    for (j=0,l=1;l<=ma;l++) 
    {
      if (ia[l]) 
      {
        wt=dyda[l]*sig2i;
        for (j++,k=0,m=1;m<=l;m++) {
          if (ia[m]) 
            alpha[j][++k] += wt*dyda[m];
        }
        beta[j] += dy*wt;
      }
    }
    chisq += dy*dy*sig2i;
  }
  for (j=2;j<=mfit;j++) {
    for (k=1;k<j;k++) 
       alpha[k][j]=alpha[j][k];
  }
  return chisq;
}
 
//------------------------------------------------------------------------------
// Held params between LM Calls
//------------------------------------------------------------------------------
class dm_LMParams 
{
 public:
  dm_matrix_t alamda;
  dm_matrix_t chisq;

  int mfit;
 
  dmVector<int> frozen;

  dmColumnVector atry;
  dmColumnVector beta;
  dmColumnVector da;
  dmColumnVector dyda;
    
  // For Gauss Jordan subroutine
  dmVector<int> indxc;
  dmVector<int> indxr;
  dmVector<int> ipiv;
    
  dmRectMatrix  oneda;
  
  public:
    dm_LMParams( int ndata, int ma, int* _frozen );   
   ~dm_LMParams();
  
};
//------------------------------------------------------------------------------

dm_LMParams::dm_LMParams( int ndata, int ma, int* _frozen  )
: atry(ma),beta(ma),da(ma),dyda(ma),frozen(ma,1)
 
{
  int j;
  
  if(_frozen) {
    for(mfit=0,j=0;j<ma;++j) {   
      if( (frozen[j] = _frozen[j]) )  
         ++mfit;
    } 
  } else
    mfit = ma;
 
  oneda.Resize(mfit,1);

  indxc.Resize(mfit);
  indxr.Resize(mfit);
  ipiv .Resize(mfit);
 
  alamda = 0.001f;
  chisq  = 1e10f;
}
//------------------------------------------------------------------------------
dm_LMParams::~dm_LMParams()
{}
//------------------------------------------------------------------------------
// 1 step of the LM method
//------------------------------------------------------------------------------
static dm_matrix_t _dmMatrixMrqMin( dmMatrixRowCol& a, 
                                    const dmMatrixRowCol& y, 
                                    const dmMatrixRowCol& sig, 
                                    dmMatrixArray& covar,
                                    dmMatrixArray& alpha,
                                    dm_matrix_t (*funcs)(int,dmMatrixRowCol&,dmMatrixRowCol&,void*), 
                                    void* userdata,
                                    dm_LMParams& _Params )
{
  int j,k,l,m;

  int mfit = _Params.mfit;

  int ma    = a.Length();
  int ndata = y.Length();
  
  dm_matrix_t alamda  = _Params.alamda;
  dm_matrix_t ochisq  = _Params.chisq;

  dmMatrixCol dyda(&_Params.dyda); // temporary stuff
  dmMatrixCol atry(&_Params.atry);

  dmVectorArray beta(_Params.beta);
  dmVectorArray da  (_Params.da);
  
  dmMatrixArray oneda(_Params.oneda);

  int* ia = _Params.frozen.Begin()-1;
  
  for (j=0,l=1;l<=ma;++l) 
  {
    if (ia[l]) 
    {
      for (j++,k=0,m=1;m<=ma;m++) {
        if (ia[m]) {
          k++;
          covar[j][k]=alpha[j][k];
        }
      }
      covar[j][j]=alpha[j][j]*(FONE+alamda);
      oneda[j][1]=beta[j];
    }
  }
  
  dmMatrix_GaussJ_1(covar,oneda,mfit,
   _Params.indxc.Begin()-1,
   _Params.indxr.Begin()-1,
   _Params.ipiv .Begin()-1);
  
  for (j=1;j<=mfit;++j) 
       da[j]=oneda[j][1];
       
  if (alamda == FZERO) 
  {
    _dmMatrix_CovSrt(covar,ma,ia,mfit);
    return _Params.chisq;
  }
  
  for(j=0,l=1;l<=ma;++l) {
    if(ia[l]) 
       atry[l]=a[l]+da[++j];
  }
  
  dm_matrix_t chisq = _dmMatrix_MrqCof(atry,dyda,y,sig,alpha,beta,funcs,
                                        userdata,ia);
  
  if (chisq < ochisq) 
  {
    alamda *= MATRIX_PREC(0.1);
    ochisq = chisq;
    for (j=0,l=1;l<=ma;l++) 
    {
      if (ia[l]) 
      {
        for (j++,k=0,m=1;m<=ma;m++) {
          if (ia[m]) {
            k++;
            alpha[j][k]=covar[j][k];
          }
        }
        beta[j]=da[j];
        a[l]=atry[l];
      }
    }    
  } else {
    alamda *= MATRIX_PREC(10.0);
  }  

  _Params.chisq  = ochisq;
  _Params.alamda = alamda;
  
  return chisq;
}
//------------------------------------------------------------------------------
dm_matrix_t dmMatrixNLFit( dmMatrixRowCol& P, 
                           const dmMatrixRowCol& Y, 
                           const dmMatrixRowCol& Sig, 
                           dmRectMatrix& Covar,
                           dmRectMatrix& Curv,
                           dm_matrix_t (*funcs)(int,dmMatrixRowCol&,dmMatrixRowCol&,void*), 
                           void* _UserData,
                           int*  _frozen,
                           int   _MaxIters  )
{
  // Init Parameters
  dm_LMParams _Params(Y.Length(),P.Length(),_frozen);

  int ma = P.Length();

  Covar.Resize(ma,ma);
  Curv .Resize(ma,ma);  
    
  dmVectorArray beta (_Params.beta);
  dmMatrixArray covar(Covar);
  dmMatrixArray alpha(Curv);
  
  dmMatrixCol dyda(&_Params.dyda);
  dmMatrixCol atry(&_Params.atry);
  
  _Params.chisq = _dmMatrix_MrqCof(P,dyda,Y,Sig,alpha,beta,funcs,
                                   _UserData,_Params.frozen.Begin()-1);
  atry.Copy(P);
  
  int step = 0,ok = 0; 
  dm_matrix_t chisq,prev = _Params.chisq;
  
  do {    
    chisq = _dmMatrixMrqMin(P,Y,Sig,covar,alpha,funcs,_UserData,_Params);
    if(chisq <= prev) 
    {
       if( fabs(chisq - prev) < 0.01 )
       {
         if(++ok > 10) { // do the last step
           _Params.alamda = FZERO;
           _Params.chisq  = chisq;
           chisq = _dmMatrixMrqMin(P,Y,Sig,covar,alpha,funcs,_UserData,_Params);
         }   
       } else
         ok = 0;
         
    } else {
      if(++step > _MaxIters)
         MatrixError("No convergence in Non linear fit !");
      
      ok = 0;
    }
    
    prev = chisq;
        
  } while(ok < 2);

  return chisq;
}
//------------------------------------------------------------------------------
// Fit with a sum of nGauss gaussians of the form
// Bk * exp[ - (( x-Ek )/Gk)² ] 
// nGauss is the number of summed Gaussians
// The Parameters must be 3 times the number of gaussians
// and the returned parameters are stored int the following sequences:
// Bk, Ek , Gk
//------------------------------------------------------------------------------


// Evaluation function
static dm_matrix_t _dmMatrixNLGaussFit(int index, dmMatrixRowCol& a  ,dmMatrixRowCol& dyda, void* _UserData) 
{
  const dmMatrixRowCol* X = reinterpret_cast<const dmMatrixRowCol*>(_UserData);
  
  int i,na=a.Length();
  dm_matrix_t x = (*X)[index];
  dm_matrix_t y,fac,ex,arg;

  y=0.0;
  for (i=1;i<=na-1;i+=3) 
  {
    arg=(x-a[i+1])/a[i+2];
    ex=static_cast<dm_matrix_t>(exp(-arg*arg));
    fac=a[i]*ex*MATRIX_PREC(2.0)*arg;
    y += a[i]*ex;
    dyda[i]=ex;
    dyda[i+1]=fac/a[i+2];
    dyda[i+2]=fac*arg/a[i+2];
  }
  
  return y;
}
//------------------------------------------------------------------------------
dm_matrix_t dmMatrixNLGaussFit( int nGauss,
                           dmMatrixRowCol& P, 
                           const dmMatrixRowCol& X, 
                           const dmMatrixRowCol& Y, 
                           const dmMatrixRowCol& S, 
                           dmRectMatrix& Covar,
                           dmRectMatrix& Curv,
                           int*  _frozen,
                           int   _MaxIters  )
{
  if(nGauss < 1) 
     MatrixError("Invalid parameter nGauss in 'dmMatrixNLGaussFit'!");

  if(P.Length() != 3 * nGauss) 
     MatrixError("Invalid Parameter vector size in 'dmMatrixNLGaussFit'!");
    
  return dmMatrixNLFit(P,Y,S,Covar,Curv,_dmMatrixNLGaussFit,(void*)(&X),
                       _frozen,_MaxIters);
}
//------------------------------------------------------------------------------

END_MATRIX()
